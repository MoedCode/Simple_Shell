/* tray to execute multiable command A */
int is_Multi_Cmd() {
    char *cmdp2 = NULL, *cmdCpy = strdup(command);
    size_t cmdLen = strlen(cmdCpy), len2, i, j, k;

    for (i = 0; i < cmdLen; i++) {
        if (cmdCpy[i] == ';' && cmdCpy[i] != '\0') {
            printf("sorry multi cmdCpy is not supported yet :)\n");

            // Skip spaces after the ';'
            for (j = i + 1; j < cmdLen && cmdCpy[j] == ' '; j++);

            cmdp2 = strdup(&cmdCpy[j]);
            break;
        }
    }

    free(cmdCpy);

    if (cmdp2) {
        printf("=> %s\n", cmdp2);
        free(cmdp2);
    }

    return 0;
}

/* tray to execute multiable command B */
int exe_mul_cmd()
{
char *mulCmd = strdup(command), *CurrToken, *delim = ";";
	size_t i, len = strlen(mulCmd);

	CurrToken = strtok(mulCmd, delim);
	FreeVar(command);

	while (CurrToken)
	{
		printf("len[%zu]\n",len);
		printInd(CurrToken, len);
		// cmd_args = tokenize(CurrToken, " ");
		// printDblArr(cmd_args, 0);
		CurrToken = strtok(NULL, delim);
	}

		return (0);
}

int is_Multi_Cmd()
{

	size_t i;
	for (i = 0; command[i] != '\n'; i++)
	{
		if (command[i] == ';')
		{
			exe_mul_cmd();
			break;

		}
	}

	return (0);
}


